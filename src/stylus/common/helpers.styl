/**
 * Global helpers
 * Author: Graffino (http://www.graffino.com)
 */

// Breakpoint names and sizes
$responsive-breakpoints = { "size": $xlarge, "name": xlarge },
    { "size": $desktop, "name": desktop },
    { "size": $large, "name": large },
    { "size": $medium, "name": medium },
    { "size": $tablet, "name": tablet },
    { "size": $small, "name": small },
    { "size": $xsmall, "name": xsmall },
    { "size": $iphone6p, "name": iphone6p },
    { "size": $iphone6, "name": iphone6 },
    { "size": $mobile, "name": mobile };


/**
 * Global helpers
 */

.h {
  // Show only on specific viewport size
  for $breakpoint in $responsive-breakpoints {
        // Show/hide classes for responsive breakpoints
      &-hide-{$breakpoint.name}-up {
          animation: fade-in 400ms forwards;

          +above($breakpoint.size + 1) {
              display: none !important;
          }
      }

      &-hide-{$breakpoint.name}-down {
          animation: fade-in 400ms forwards;

          +below($breakpoint.size) {
              display: none !important;
          }
      }

      &-show-{$breakpoint.name}-up {
          display: none !important;
          animation: fade-in 400ms forwards;

          +above($breakpoint.size + 1) {
              display: block !important;
          }
      }

      &-show-{$breakpoint.name}-down {
          display: none !important;
          animation: fade-in 400ms forwards;

          +below($breakpoint.size) {
              display: block !important;
          }
      }

      // Display types for responsive breakpoints
      for $type in inline inline-block block flex none {
          &-display-{$type} {
              &-{$breakpoint.name} {
                  +below($breakpoint.size) {
                      display: $type !important;
                  }
              }
          }
      }
  }

  // Center for specific viewport size
  &-center-for {
    &-large-down {
      +below($large) {
        text-align: center !important;
      }
    }

    &-tablet-down {
      +below($tablet) {
        text-align: center !important;
      }
    }

    &-mobile-down {
      +below($mobile) {
        text-align: center !important;
      }
    }
  }

  // Make image responsive
  &-responsive-image {
    width: 100%;
    height: auto;
  }

  // Hide element visually without removing it
  &-visually-hidden {
    overflow: hidden !important;
    position: absolute !important;
    width: 1px !important;
    height: 1px !important;
    margin: -1px !important;
    border: 0 !important;
    padding: 0 !important;
    clip: rect(0 0 0 0) !important;
  }

  // Overflow hidden
  &-overflow {
    &-hidden {
      overflow: hidden;
    }
  }

  // Text alignment for breakpoints
  &-align {
    for position in left center right {
      &-{position} {
        text-align: position !important;

        for $breakpoint in $responsive-breakpoints {
          &-{$breakpoint.name} {
            +below($breakpoint.size) {
              text-align: position !important;
            }
          }
        }
      }
    }
  }

  // Floats
  &-float {
    for $float in none left right {
      &-{$float} {
        float: $float !important;

        for $breakpoint in $responsive-breakpoints {
          &-{$breakpoint.name} {
            +below($breakpoint.size) {
              float: $float !important;
            }
          }
        }
      }
    }
  }

  // Margins
  &-margin {
    for $side in none top right bottom left {
      for i in 0 1 2 3 4 5 6 7 8 9 10 {
        &-{$side}-{i} {
          margin-{$side}: rem(i * 10);
        }
      }
    }
  }

    // No margin classes
  &-no-margin {
      margin: 0 !important;

      for direction in top right bottom left {
          &-{direction} {
              margin-{direction}: 0 !important; // @stylint ignore
          }
      }
  }

  // No padding classes
  &-no-padding {
      padding: 0 !important;

      for direction in top right bottom left {
          &-{direction} {
              padding-{direction}: 0 !important; // @stylint ignore
          }
      }
  }



  &-clear {
    clearfix();

    &-both {
      clear: both;
    }
  }

  // Text case
  &-case {
    &-normal {
      text-transform: none !important;
    }

    &-uppercase {
      text-transform: uppercase !important;
    }
  }

  // Text color
  &-color {
    &-inherit {
      color: inherit !important;
    }
  }

  // Center
  &-center {
    // Make sure the element doesn't have a float,
    // otherwise the helper doesn't work
    float: none !important;
    margin-right: auto !important;
    margin-left: auto !important;
  }

  // Paddings
  &-no-padding {
    padding: 0 !important;

    &-top {
      padding-top: 0 !important;
    }

    &-bottom {
      padding-bottom: 0 !important;
    }

    &-right {
      padding-right: 0 !important;
    }

    &-left {
      padding-left: 0 !important;
    }
  }

  // Margins
  &-no-margin {
    margin: 0 !important;

    &-top {
      margin-top: 0 !important;
    }

    &-bottom {
      margin-bottom: 0 !important;
    }

    &-right {
      margin-right: 0 !important;
    }

    &-left {
      margin-left: 0 !important;
    }
  }

  // Display
    for $type in inline inline-block block flex inline-flex none {
      &-display-{$type} {
        display: $type !important;
      }
    }

    for $type in static relative fixed absolute {
      &-position-{$type} {
        position: $type !important;
      }
    }

  // Align vertically via table method
  &-vertical-align {
    display: table-cell !important;
    vertical-align: middle;

    &-middle {
      vertical-align: middle !important;
    }
  }

  // Height 100%
  &-full-height {
    min-height: 100%;
  }

  // Disable pointer events
  &-no-pointer-events {
    pointer-events: none;
  }

  // Word-break
  &-word-break {
    &-all {
      word-break: break-all;
    }
  }

  &-nowrap {
    white-space: nowrap;
  }

  // Position
  &-position {
    &-static {
      position: static !important;
    }

    &-relative {
      position: relative !important;
    }

    &-absolute {
      position: absolute !important;
    }
  }

    // Z-index scale helper classes
    for i in 0 1 2 3 4 5 6 7 8 9 10 {
      &-z-index {
        &-{i} {
          z-index: i * 100;
        }

        &-max {
          z-index: 2147483647;
        }

        &-negative {
          z-index: -1;

          &-{i} {
            z-index: i * -100;
          }
        }
      }
    }

      // Flex-grow scale helper classes
    for i in 0 1 2 3 4 5 6 7 8 9 10 {
        &-flex-grow-{i} {
            flex-grow: i;
        }
    }

    // Flex align-items helper classes
    for pos in baseline center end flex-end flex-start left normal right {
        &-flex-align-items-{pos} {
            align-items: pos !important;
        }
    }

    // Flex justify-content helper classes
    for pos in center flex-end flex-start space-between space-around {
        &-flex-justify-content-{pos} {
            justify-content: pos !important;
        }
    }

  &-no-before {
    &::before {
      content: none !important;
    }
  }

  &-no-after {
    &::after {
      content: none !important;
    }
  }
}
