//
// Stylus mixins
// Author: Graffino (http://www.graffino.com)
//


/**
 * Custom mixins
 */

// Convert to REM
rem($value) {
    return unit($value/$base-font-size-px, "rem"); // @stylint ignore
}

// Convert to EM
em($value) {
    return unit($value/$base-font-size-px, "em"); // @stylint ignore
}

// Px to percent
px-to-procent($value, $max-value) {
    return $value*100/$max-value; // @stylint ignore
}

// Px to percent
procent-to-px($procent, $max-value) {
    return $procent*$max-value/100; // @stylint ignore
}

// Convert value to string
string($value) {
    return "" + $value; // @stylint ignore
}

// CSS calc() subtract value from 100% width
width-from-100($value) {
    return "calc(100% - %s)" % rem($value);
}

// CSS calc() subtract value from 100% height
height-from-100($value) {
    return "calc(100% - %s)" % rem($value);
}

// CSS calc() add value to 100%
calc-100-plus($value) {
    return "calc(100% + %s)" % rem($value);
}

// CSS calc() substract value from 50%
calc-50-minus($value) {
    return "calc(50% - %s)" % rem($value);
}

// Convert nr. of columns to px
cols-to-px($value) {
    return (($value - 1) * $width-columns-gutter) + ($value * $width-column);
}

// Mobile pixels â€” Below $tablet breakpoint HTML font-size is lowered
// This mixin takes the input and makes the sure the output of rem represents
// the pixel value that has been passed.
mobile-rem($value) {
    return rem($value * ($base-font-size-px / $tablet-font-size-px));
}

// Function for sorting a list of items
sort(list, fn = null) {
    // default sort function
    if (fn == null) {
        fn = @(a, b) {
          a > b;
        }
    }

    // Bubble sort
    for $i in 1..length(list) - 1 {
        for $j in (0..$i - 1) {
            if fn(list[$j], list[$i]) {
                $temp = list[$i];
                list[$i] = list[$j];
                list[$j] = $temp;
            }
        }
    }

    return list;
}

// Mixin for converting data-progress to width for the progress bar using classes
data-attr-to-color-code($increment) {
    // Loop from 0 to 100 with increments of 5
    for $i in range(0, 100, $increment) {
        // Progress bar color
        if (0 <= $i && $i <= 25) {
            $progress-bar-color = $color-progress-bar-background-orange;
            $title-color = $color-vacancies-code-orange;
        }
        if (25 < $i && $i < 75) {
            $progress-bar-color = $color-progress-bar-background-blue;
            $title-color = $color-vacancies-code-blue;
        }
        if (75 < $i && $i <= 99) {
            $progress-bar-color = $color-progress-bar-background-purple;
            $title-color = $color-vacancies-code-purple;
        }
        if ($i == 100) {
            $progress-bar-color = $color-progress-bar-background-green;
            $title-color = $color-vacancies-code-green;
        }

        // Building selectors exporting CSS
        // Adding the title color and progress bar colors
        &[data-progress=\"{$i}\"] {
            .progress-bar,
            .progress-bar[data-progress=\"{$i}\"] {
                .progress {
                    // Setting the progress bar's width
                    width: $i + "%";
                    // Adding custom color classes
                    background-color: $progress-bar-color;
                }
            }

            .title {
                color: $title-color;
            }
        }
    }
}

// Nearest multiple of x
// Thanks to: https://stackoverflow.com/questions/14196987/java-round-to-nearest-multiple-of-5-either-up-or-down#answer-14197029
near($value = 24, $multiplier = $unit, $direction = "up") {
    $result = 0;
    // This formula rounds to the nearest multiple (either up or down)
    if ($direction == "none") {
        $result = $multiplier * (round($value / $multiplier));
    }

    if ($direction == "up") {
        $result = $multiplier * (ceil(abs($value / $multiplier)));
    }

    if ($direction == "down") {
        $result = $multiplier * (floor(abs($value / $multiplier)));
    }

    return $result;
}

// Mixing that exports the heading's information (e.g. size, line-height, etc.)
export-headings-info($size) {
    .-fontface {
        &::after {
            content: string($heading-fontface);
        }
    }
    .-font-size {
        &::after {
            content: string($font-size-headings[$size]);
        }
    }
    .-leading {
        &::after {
            content: string($line-height-headings[$size]);
        }
    }
    .-font-weight {
        &::after {
            content: string($font-weight-headings[$size]);
        }
    }
    .-transform {
        &::after {
            content: string($transform-headings[$size]);
        }
    }
}

// Output to pseudo-console
console($value) {
    body:before {
        content: "Stylus> " + string($value);
    }
}


/*
 * Font mixin
 */

webfont($family, $file, $weight = normal, $style = normal) {
    @font-face {
        font-family: $family;
        src: url("../fonts/" + $file + ".woff2") format("woff2"),
            url("../fonts/" + $file + ".woff") format("woff"),
            url("../fonts/" + $file + ".ttf") format("truetype"); // @stylint ignore
            font-style: $style;
        font-weight: $weight;
    }
}


/**
 * Animation mixin
 */

transition-custom($property = all, $duration = 250ms, $ease = cubic-bezier(0.250, 0.460, 0.450, 0.940)) { // @stylint ignore
    return $property $duration $ease; // @stylint ignore
}
